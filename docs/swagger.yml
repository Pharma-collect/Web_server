swagger: "2.0"
info:
  description: "This file index all routes necessary for Pharma-collect app. Here is the list of available web-services as well as the parameters necessary for their proper functioning. \n Be careful : \n 1) Query parameters must be sent in JSON format \n 2) You must respect the syntax of the parameters to be sent to the server \n 3) Mandatory parameters will be noted with '*' \n 4) You need to add a header with Key : 'Host' and Value : 'node' \n 5) All routes follow the format : {{URL}}/api/category_name/route_name"
  version: "1.0.0"
  title: "Pharma-collect API Swagger file"
tags:

- name: "user_client"
  description: "Pharma-collect client routes"
- name: "user_pro"
  description: "Pharma-collect pro routes"
- name: "pharmacy"
  description: "Pharma-collect pharmacy routes"
- name: "product"
  description: "Pharma-collect product routes"
- name: "container"
  description: "Pharma-collect locker routes"
- name: "order"
  description: "Pharma-collect order routes"
- name: "order_detail"
  description: "Pharma-collect order details routes"
schemes:
- "https"
paths:

#Client Routes
  /getAllUserClient:
    get:
      tags:
      - "user_client"
      summary: ""
      description: "Retrieve all the customers present in the database"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/getAllUser"
        "404":
          description: "404 Page not found"
  
  /getUserClientById:
    get:
      tags:
      - "user_client"
      summary: ""
      description: "Retrieve a customer based on its ID \n \nCalls corresponding to this function are secured. To access a user's information you must be that user and you will have to send your identification token in the Header : \n Key : \"Authorization\",  Value : \"<your_token>\""
      parameters:
      - in: "body"
        name: "body"
        description: "Id to search"
        required: true
        schema:
          $ref: "#/definitions/UserId"
      responses:
        "200":
          description: "Success"
          
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found \n Can appear because of missing parameter or internal server"
  
  /getUserClientByUsername:
    get:
      tags:
      - "user_client"
      summary: ""
      description: "Retrieve a customer based on its username"
      parameters:
      - in: "body"
        name: "body"
        description: "Username to search"
        required: true
        schema:
          $ref: "#/definitions/UserName"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found \n Can appear because of missing parameter or internal server"
  
  /deleteUserClient: 
    post:
      tags: 
      - "user_client"
      summary: ""
      description: "Delete a customer according to its ID"
      parameters:
      - in: "body"
        name: "body"
        description: "Id to search"
        required: true
        schema:
          $ref: "#/definitions/UserId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found \n Can appear because of missing parameter or internal server"
  
  /registerClient: 
    post:
      tags: 
      - "user_client"
      summary: ""
      description: "Create a new client \n Password must be hash in Bcrypt with a salt of 10"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters to add to the request"
        required: true
        schema:
          $ref: "#/definitions/UserCreation"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/getAllUser"
        "404":
          description: "404 Page not found \n Can appear because of missing parameter or internal server"
  
  /loginClient: 
    post:
      tags: 
      - "user_client"
      summary: ""
      description: "Login to an account"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters to add to the request"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/LoginSuccess"
        "201":
          description: "When empty field \n Often 200 error"
          schema:
            $ref: "#/definitions/LoginEmpty"
        "202":
          description: "When incorrect username or password \n Often 200 error"
          schema:
            $ref: "#/definitions/LoginIncorrect"
        "404":
          description: "404 Page not found"
          
          
  #Professionnal Routes
  /getAllUserPro:
    get:
      tags:
      - "user_pro"
      summary: ""
      description: "Retrieve all the professional present in the database"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/getAllUserPro"
        "404":
          description: "404 Page not found"
  
  /getUserProByPharmacy:
    get: 
      tags:
      - "user_pro"
      summary: ""
      description: "Retrieve a customer based on its pharmacy"
      parameters:
      - in: "body"
        name: "body"
        description: "Pharmacy id to search"
        required: true
        schema:
          $ref: "#/definitions/PharmaId"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found \n Can appear because of missing parameter or internal server"
          
  /getUserProById:
    get:
      tags:
      - "user_pro"
      summary: ""
      description: "Retrieve a professionnal based on its ID \n \nCalls corresponding to this function are secured. To access a user's information you must be that user and you will have to send your identification token in the Header : \n Key : \"Authorization\",  Value : \"<your_token>\""
      parameters:
      - in: "body"
        name: "body"
        description: "Id to search"
        required: true
        schema:
          $ref: "#/definitions/UserId"
      responses:
        "200":
          description: "Success"
          
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found \n Can appear because of missing parameter or internal server"

  /deleteUserPro: 
    post:
      tags: 
      - "user_pro"
      summary: ""
      description: "Delete a professional according to its ID"
      parameters:
      - in: "body"
        name: "body"
        description: "Id to search"
        required: true
        schema:
          $ref: "#/definitions/UserId"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found \n Can appear because of missing parameter or internal server"
          
  /registerPro:
    post:
      tags: 
      - "user_pro"
      summary: ""
      description: "Create a professional according to its name and pharmacy id"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters of the request"
        required: true
        schema:
          $ref: "#/definitions/UserProCreation"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UserProCreationSuccess"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found \n Can appear because of missing parameter or internal server"
    
  /loginPro: 
    post:
      tags: 
      - "user_pro"
      summary: ""
      description: "Login to a professionnal account"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters to add to the request"
        required: true
        schema:
          $ref: "#/definitions/Login"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/LoginProSuccess"
        "201":
          description: "When empty field \n Often 200 error"
          schema:
            $ref: "#/definitions/LoginEmpty"
        "202":
          description: "When incorrect username or password \n Often 200 error"
          schema:
            $ref: "#/definitions/LoginIncorrect"
        "404":
          description: "404 Page not found"
          
  #Pharmacy Routes
  /getPharmacyById:
    get:
      tags:
      - "pharmacy"
      summary: ""
      description: "Get pharmacies based on its ID"
      parameters:
      - in: "body"
        name: "body"
        description: "Id of the pharmacy"
        required: true
        schema:
          $ref: "#/definitions/PharmaId"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found"
  
  /getPharmacyByName:
    get:
      tags:
      - "pharmacy"
      summary: ""
      description: "Get pharmacies based on its name"
      parameters:
      - in: "body"
        name: "body"
        description: "Name of the pharmacy"
        required: true
        schema:
          $ref: "#/definitions/PharmaName"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found"
          
  /getPharmacyByCity:
    get:
      tags:
      - "pharmacy"
      summary: ""
      description: "Get pharmacies based on its city location"
      parameters:
      - in: "body"
        name: "body"
        description: "City where is located the pharmacy"
        required: true
        schema:
          $ref: "#/definitions/PharmaCity"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found"
          
  /getPharmacyByPostCode:
    get:
      tags:
      - "pharmacy"
      summary: ""
      description: "Get pharmacies based on its postcode location"
      parameters:
      - in: "body"
        name: "body"
        description: "Postcode where is located the pharmacy"
        required: true
        schema:
          $ref: "#/definitions/PharmaPostCode"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found"
          
  /getPharmacyByBoss:
    get:
      tags:
      - "pharmacy"
      summary: ""
      description: "Get pharmacies based on its postcode location"
      parameters:
      - in: "body"
        name: "body"
        description: "Find a pharmacy with its boss name"
        required: true
        schema:
          $ref: "#/definitions/PharmaBoss"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found"
    
  /getPharmacyWithShop:
    get:
      tags:
      - "pharmacy"
      summary: ""
      description: "Get pharmacies which have a shop"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PharmaShop"
        "404":
          description: "404 Page not found / Error on fields"
  
  /getPharmacyWithoutShop:
    get:
      tags:
      - "pharmacy"
      summary: ""
      description: "Get pharmacies which do not have a shop"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PharmaShop"
        "404":
          description: "404 Page not found / Error on fields"
  
  /createPharmacy:
    post:
      tags:
      - "pharmacy"
      summary: ""
      description: "Create a new pharmacy\nonly available for the boss account"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters of the request"
        required: true
        schema:
          $ref: "#/definitions/Pharma"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PharmaShop"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found / Error on fields"
  
  /updatePharmacy:
    post:
      tags:
      - "pharmacy"
      summary: ""
      description: "Update a pharmacy by giving the new characteristics\nIs only available for the boss account"
      parameters:
      - in: "body"
        name: "body"
        description: "Parameters of the request"
        required: true
        schema:
          $ref: "#/definitions/Pharmacy"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/PharmaShop"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found / Error on fields"
          
  /deletePharmacyById:
    post:
      tags:
      - "pharmacy"
      summary: ""
      description: "Delete a pharmacy using its id\nIs only available for the boss account"
      parameters:
      - in: "body"
        name: "body"
        description: "Id of the pharmacy to delete"
        required: true
        schema:
          $ref: "#/definitions/PharmaId"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found / Error on fields"
  
  /deletePharmacyByBoss:
    post:
      tags:
      - "pharmacy"
      summary: ""
      description: "Delete a pharmacy using the name of the boss \nIs only available for the boss account"
      parameters:
      - in: "body"
        name: "body"
        description: "Boss name of the pharmacy to delete"
        required: true
        schema:
          $ref: "#/definitions/PharmaBoss"
      responses:
        "200":
          description: "Success"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Unauthorized"
        "404":
          description: "404 Page not found / Error on fields"
  
  
definitions:
  getAllUser:
    type: "object"
    properties:
      success:
        type: "boolean"
      result:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/User"
  
  getAllUserPro:
    type: "object"
    properties:
      success:
        type: "boolean"
      result:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/UserPro"
  
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 13
      username:
        type: "string"
        example: "lilian.giraudo"
      name:
        type: "string"
        example: "lilian"
      lastname:
        type: "string"
        example: "giraudo"
      mail:
        type: "string"
        example: "lilian.giraudo@swagger.fr"
      phone:
        type: "string"
        example: "0601020304"
      birth:
        type: "string"
        example: "12-12-1994"
      image_url:
        type: "string"
        example: "null"
  
  UserId:
    type: "object"
    properties:
      user_id:
        type: "string"
  
  UserName:
    type: "object"
    properties:
      username:
        type: "string"

  UserCreation:
    type: "object"
    properties:
      username:
        type: "string"
        example: "lilian.giraudo"
      name:
        type: "string"
        example: "lilian"
      lastname:
        type: "string"
        example: "giraudo"
      mail:
        type: "string"
        example: "lilian.giraudo@swagger.fr"
      phone:
        type: "string"
        example: "0601020304"
      birth:
        type: "string"
        example: "12-12-1994"
      password:
        type: "string"
        example: "xxxxxxxxxx"
        
  UserPro:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
        example: 3
      username:
        type: "string"
        example: "melvin.marra"
      pharmacy_id:
        type: "integer"
        format: "int64"
        example: 1
      is_admin:
        type: "integer"
        format: "int64"
        example: 0
  
  UserProCreation:
    type: "object"
    properties: 
      username:
        type: "string"
        example: "melvin.marra"
      password:
        type: "string"
        example: "xxxxxxxxxx"
      pharmacy_id: 
        type: "integer"
        example: 1
  
  UserProCreationSuccess:
    type: "object"
    properties:
      succes:
        type: "boolean"
        example: true
      result:
        type: "object"
        properties:
          id:
            type: "integer"
            format: "int64"
            example: 7
          username:
            type: "string"
            example: "melvin.marra"
          pharmacy_id:
            type: "integer"
            example: 1
          is_admin:
            type: "integer"
            example: 0
           
  Login:
    type: "object"
    properties: 
      username:
        type: "string"
        example: "lilian.giraudo"
      password:
        type: "string"
        example: "xxxxxxxxxx"
        
  LoginEmpty:
    type: "object"
    properties:
      succes:
        type: "boolean"
        example: false
      error:
        type: "string"
        example: "Veuillez remplir tous les champs"
  
  LoginIncorrect:
    type: "object"
    properties:
      succes:
        type: "boolean"
        example: false
      error:
        type: "string"
        example: "Identifiant incorrect"
        
  LoginSuccess:
    type: "object"
    properties:
      succes:
        type: "boolean"
        example: true
      result:
        type: "object"
        properties:
          id:
            type: "integer"
            format: "int64"
            example: 13
          username:
            type: "string"
            example: "lilian.giraudo"
          name:
            type: "string"
            example: "lilian"
          lastname:
            type: "string"
            example: "giraudo"
          mail:
            type: "string"
            example: "lilian.giraudo@swagger.fr"
          phone:
            type: "string"
            example: "0601020304"
          birth:
            type: "string"
            example: "12-12-1994"
          image_url:
            type: "string"
            example: "null"
          token: 
            type: "string"
            example: "eyFndeodojdTdfsFRSkfjspkfsjdbflsdnlsfnlsbfpsinflsfbs"
        
  LoginProSuccess:
    type: "object"
    properties:
      succes:
        type: "boolean"
        example: true
      result:
        type: "object"
        properties:
          id:
            type: "integer"
            format: "int64"
            example: 7
          username:
            type: "string"
            example: "melvin.marra"
          pharmacy_id:
            type: "integer"
            example: 1
          token:
            type: "string"
            example: "eyFndeodojdTdfsFRSkfjspkfsjdbflsdnlsfnlsbfpsinflsfbs"

  Pharma: 
    type: "object"
    properties:
      name: 
        type: "string"
        example: "myPharmacy"
      has_shop:
        type: "integer"
        example: 1
      road_nb: 
        type: "integer"
        example: 35
      road: 
        type: "string"
        example: "Rue de l'étang"
      phone: 
        type: "string"
        example: "0606060606"
      post_code: 
        type: "string"
        example: "30100"
      city: 
        type: "string"
        example: "Alès"
      boss: 
        type: "string"
        example: "Lilian"
  
  Pharmacy: 
    type: "object"
    properties:
      id:
        type: "integer"
        example: 1
      name: 
        type: "string"
        example: "myPharmacy"
      has_shop:
        type: "integer"
        example: 0
      road_nb: 
        type: "integer"
        example: 35
      road: 
        type: "string"
        example: "Rue de l'étang"
      phone: 
        type: "string"
        example: "0606060606"
      post_code: 
        type: "string"
        example: "30100"
      city: 
        type: "string"
        example: "Alès"
      boss: 
        type: "string"
        example: "Melvin"
  
  PharmaId:
    type: "object"
    properties:
      pharmacy_id:
        type: "integer"
        example: 1
  
  PharmaName:
    type: "object"
    properties:
      name:
        type: "string"
        example: "myPharmacy"
        
  PharmaCity:
    type: "object"
    properties:
      city:
        type: "string"
        example: "Alès"
  
  PharmaPostCode:
    type: "object"
    properties:
      post_code:
        type: "string"
        example: "30100"

  PharmaBoss:
    type: "object"
    properties:
      boss:
        type: "string"
        example: "Lilian"
  
  PharmaShop:
    type: "object"
    properties:
      success:
        type: "boolean"
      result:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Pharma"
      
        
  Unauthorized:
    type: "object"
    properties:
      succes:
        type: "boolean"
        example: false
      error:
        type: "string"
        example: "Authentification échouée"
  
  Success:
    type: "object"
    properties:
      succes:
        type: "boolean"
        example: true
      result:
        type: "integer"
        format: "int64"
        example: 1
